// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

type MockStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorage) EXPECT() *MockStorage_Expecter {
	return &MockStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockStorage
func (_mock *MockStorage) Delete(ctx context.Context, key string) error {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Delete(ctx interface{}, key interface{}) *MockStorage_Delete_Call {
	return &MockStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockStorage_Delete_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Delete_Call) Return(err error) *MockStorage_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorage_Delete_Call) RunAndReturn(run func(ctx context.Context, key string) error) *MockStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Download provides a mock function for the type MockStorage
func (_mock *MockStorage) Download(ctx context.Context, key string) ([]byte, string, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Download")
	}

	var r0 []byte
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, string, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) string); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, key)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockStorage_Download_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Download'
type MockStorage_Download_Call struct {
	*mock.Call
}

// Download is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Download(ctx interface{}, key interface{}) *MockStorage_Download_Call {
	return &MockStorage_Download_Call{Call: _e.mock.On("Download", ctx, key)}
}

func (_c *MockStorage_Download_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Download_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Download_Call) Return(bytes []byte, s string, err error) *MockStorage_Download_Call {
	_c.Call.Return(bytes, s, err)
	return _c
}

func (_c *MockStorage_Download_Call) RunAndReturn(run func(ctx context.Context, key string) ([]byte, string, error)) *MockStorage_Download_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockStorage
func (_mock *MockStorage) Exists(ctx context.Context, key string) (bool, error) {
	ret := _mock.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return returnFunc(ctx, key)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockStorage_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockStorage_Expecter) Exists(ctx interface{}, key interface{}) *MockStorage_Exists_Call {
	return &MockStorage_Exists_Call{Call: _e.mock.On("Exists", ctx, key)}
}

func (_c *MockStorage_Exists_Call) Run(run func(ctx context.Context, key string)) *MockStorage_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorage_Exists_Call) Return(b bool, err error) *MockStorage_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockStorage_Exists_Call) RunAndReturn(run func(ctx context.Context, key string) (bool, error)) *MockStorage_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateURL provides a mock function for the type MockStorage
func (_mock *MockStorage) GenerateURL(ctx context.Context, key string, expiration time.Duration) (string, error) {
	ret := _mock.Called(ctx, key, expiration)

	if len(ret) == 0 {
		panic("no return value specified for GenerateURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return returnFunc(ctx, key, expiration)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = returnFunc(ctx, key, expiration)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, key, expiration)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_GenerateURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateURL'
type MockStorage_GenerateURL_Call struct {
	*mock.Call
}

// GenerateURL is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - expiration time.Duration
func (_e *MockStorage_Expecter) GenerateURL(ctx interface{}, key interface{}, expiration interface{}) *MockStorage_GenerateURL_Call {
	return &MockStorage_GenerateURL_Call{Call: _e.mock.On("GenerateURL", ctx, key, expiration)}
}

func (_c *MockStorage_GenerateURL_Call) Run(run func(ctx context.Context, key string, expiration time.Duration)) *MockStorage_GenerateURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorage_GenerateURL_Call) Return(s string, err error) *MockStorage_GenerateURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorage_GenerateURL_Call) RunAndReturn(run func(ctx context.Context, key string, expiration time.Duration) (string, error)) *MockStorage_GenerateURL_Call {
	_c.Call.Return(run)
	return _c
}

// Upload provides a mock function for the type MockStorage
func (_mock *MockStorage) Upload(ctx context.Context, key string, data []byte, contentType string) (string, error) {
	ret := _mock.Called(ctx, key, data, contentType)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, string) (string, error)); ok {
		return returnFunc(ctx, key, data, contentType)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, string) string); ok {
		r0 = returnFunc(ctx, key, data, contentType)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte, string) error); ok {
		r1 = returnFunc(ctx, key, data, contentType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorage_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MockStorage_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - data []byte
//   - contentType string
func (_e *MockStorage_Expecter) Upload(ctx interface{}, key interface{}, data interface{}, contentType interface{}) *MockStorage_Upload_Call {
	return &MockStorage_Upload_Call{Call: _e.mock.On("Upload", ctx, key, data, contentType)}
}

func (_c *MockStorage_Upload_Call) Run(run func(ctx context.Context, key string, data []byte, contentType string)) *MockStorage_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockStorage_Upload_Call) Return(s string, err error) *MockStorage_Upload_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorage_Upload_Call) RunAndReturn(run func(ctx context.Context, key string, data []byte, contentType string) (string, error)) *MockStorage_Upload_Call {
	_c.Call.Return(run)
	return _c
}
