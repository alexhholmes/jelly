openapi: "3.0.0"
info:
  version: 1.0.0
  title: A photo sharing social media API
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080/
    description: Localhost server
    variables:
      port:
        enum:
          - "8080"
          - "6060" # Go pprof (enabled when ENVIRONMENT=DEV)
        default: "8080"
paths:
  /health:
    get:
      operationId: healthCheck
      description: Check API health status
      security: [ ]
      responses:
        '200':
          description: API healthcheck
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
  /photo:
    post:
      operationId: uploadPhoto
      description: Uploads a photo and returns the photo ID for creation of a post.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: The photo file to upload
                caption:
                  type: string
                  maxLength: 500
                  description: Optional caption for the photo
                tags:
                  type: array
                  items:
                    type: string
                  maxItems: 10
                  description: Optional tags for the photo
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoUploadResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '403':
          $ref: '#/components/responses/forbidden'
        '500':
          $ref: '#/components/responses/internal-error'
  /photo/{id}:
    get:
      operationId: getPhoto
      description: Get photo details and metadata by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Photo ID
          example: photo_123456
      responses:
        '200':
          description: Photo details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PhotoDetailsResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-error'
  /photo/raw/{id}:
    get:
      operationId: getRawPhoto
      description: Get raw photo details and metadata by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: Raw photo ID
          example: raw_photo_123456
      responses:
        '200':
          description: Raw photo details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawPhotoDetailsResponse'
        '400':
          $ref: '#/components/responses/bad-request'
        '403':
          $ref: '#/components/responses/forbidden'
        '404':
          $ref: '#/components/responses/not-found'
        '500':
          $ref: '#/components/responses/internal-error'
components:
  responses:
    bad-request:
      description: 400 BAD REQUEST
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequest'
    forbidden:
      description: 403 FORBIDDEN
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Forbidden'
    not-found:
      description: 404 NOT FOUND
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'
    internal-error:
      description: 500 INTERNAL SERVER ERROR
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
  schemas:
    HealthCheck:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          example: ok
    BadRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: bad request
    Forbidden:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: forbidden, newsletter is hidden by author
    NotFound:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: not found
    InternalServerError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: internal server error
    Photo:
      type: object
      required:
        - id
        - url
        - uploadedAt
      properties:
        id:
          type: string
          description: Unique identifier for the photo
          example: photo_123456
        url:
          type: string
          format: uri
          description: URL to access the uploaded photo
          example: https://example.com/photos/photo_123456.jpg
        caption:
          type: string
          description: Photo caption
          example: Beautiful sunset
        tags:
          type: array
          items:
            type: string
          description: Photo tags
          example: ["sunset", "nature"]
        uploadedAt:
          type: string
          format: date-time
          description: Timestamp when photo was uploaded
          example: 2024-01-01T12:00:00Z
    PhotoUploadResponse:
      type: object
      required:
        - photo
      properties:
        photo:
          $ref: '#/components/schemas/Photo'
        message:
          type: string
          example: Photo uploaded successfully
    PhotoDetailsResponse:
      type: object
      required:
        - photo
      properties:
        photo:
          $ref: '#/components/schemas/PhotoDetails'
        message:
          type: string
          example: Photo details retrieved successfully
    RawPhotoDetailsResponse:
      type: object
      required:
        - rawPhoto
      properties:
        rawPhoto:
          $ref: '#/components/schemas/RawPhotoDetails'
        message:
          type: string
          example: Raw photo details retrieved successfully
    PhotoDetails:
      type: object
      required:
        - id
        - rawPhotoId
        - userId
        - filename
        - originalUrl
        - thumbnailUrl
        - fileSize
        - mimeType
        - uploadedAt
        - updatedAt
      properties:
        id:
          type: string
          description: Unique identifier for the photo
          example: photo_123456
        rawPhotoId:
          type: string
          description: Reference to the raw photo
          example: raw_photo_789
        userId:
          type: string
          description: User who uploaded the photo
          example: user_456
        filename:
          type: string
          description: Processed filename
          example: processed_photo_123456.jpg
        originalUrl:
          type: string
          format: uri
          description: URL to the original processed photo
          example: https://example.com/photos/processed_photo_123456.jpg
        thumbnailUrl:
          type: string
          format: uri
          description: URL to the thumbnail version
          example: https://example.com/thumbnails/thumb_photo_123456.jpg
        caption:
          type: string
          description: Photo caption
          example: Beautiful sunset
        tags:
          type: array
          items:
            type: string
          description: Photo tags
          example: ["sunset", "nature"]
        fileSize:
          type: integer
          format: int64
          description: File size in bytes
          example: 2048576
        mimeType:
          type: string
          description: MIME type of the photo
          example: image/jpeg
        width:
          type: integer
          description: Photo width in pixels
          example: 1920
        height:
          type: integer
          description: Photo height in pixels
          example: 1080
        uploadedAt:
          type: string
          format: date-time
          description: Timestamp when photo was uploaded
          example: 2024-01-01T12:00:00Z
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when photo was last updated
          example: 2024-01-01T12:00:00Z
        scheduleDeletion:
          type: string
          format: date-time
          description: Scheduled deletion timestamp
          example: 2024-02-01T12:00:00Z
    RawPhotoDetails:
      type: object
      required:
        - id
        - userId
        - originalFilename
        - storageUrl
        - fileSize
        - mimeType
        - md5Hash
        - uploadedAt
      properties:
        id:
          type: string
          description: Unique identifier for the raw photo
          example: raw_photo_123456
        userId:
          type: string
          description: User who uploaded the photo
          example: user_456
        originalFilename:
          type: string
          description: Original filename from upload
          example: IMG_20240101_120000.jpg
        storageUrl:
          type: string
          format: uri
          description: URL to the raw photo in storage
          example: https://storage.example.com/raw/raw_photo_123456.jpg
        fileSize:
          type: integer
          format: int64
          description: File size in bytes
          example: 5242880
        mimeType:
          type: string
          description: MIME type of the photo
          example: image/jpeg
        md5Hash:
          type: string
          description: MD5 hash of the file
          example: 5d41402abc4b2a76b9719d911017c592
        width:
          type: integer
          description: Photo width in pixels
          example: 4032
        height:
          type: integer
          description: Photo height in pixels
          example: 3024
        exifData:
          type: object
          description: EXIF metadata from the photo
          example: {"camera": "iPhone 15", "iso": 100, "aperture": "f/1.8"}
        uploadedAt:
          type: string
          format: date-time
          description: Timestamp when photo was uploaded
          example: 2024-01-01T12:00:00Z
        processedAt:
          type: string
          format: date-time
          description: Timestamp when photo was processed
          example: 2024-01-01T12:01:00Z
        scheduleDeletion:
          type: string
          format: date-time
          description: Scheduled deletion timestamp
          example: 2024-02-01T12:00:00Z
